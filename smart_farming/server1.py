# from fastmcp import FastMCP
# import logging
# from pathlib import Path
# import os
# import sys
# import json

# # --- Load Configuration ---
# config_path = Path(__file__).parent / "config.json"
# if not config_path.exists():
#     raise FileNotFoundError(f"Configuration file not found: {config_path}")

# with open(config_path, "r") as config_file:
#     config = json.load(config_file)

# # --- Setup Logging ---
# logging_level = config.get("logging", {}).get("level", "INFO").upper()
# logging.basicConfig(level=getattr(logging, logging_level, logging.INFO))
# logger = logging.getLogger("SmartFarmingMCP")

# # --- Ensure Project Root is in Path ---
# project_root = os.path.dirname(os.path.abspath(__file__))
# if project_root not in sys.path:
#     sys.path.insert(0, project_root)

# # --- Imports (replace with real ones in your project) ---
# try:
#     from tools.weather_tool import get_weather_data
# except ImportError:
#     def get_weather_data(location: str):
#         return {"location": location, "temp": "25Â°C", "status": "Sunny (dummy)"}

# try:
#     from models.disease_predictor import analyze_plant_image
# except ImportError:
#         def analyze_plant_image(image_path: str):
#             # Dummy return for testing
#             return {
#                 "disease": "Tomato___Late_blight",
#                 "recommendations": "Apply fungicides like Chlorothalonil or Copper-based sprays."
#             }

# try:
#     from models.agent_creator import create_and_run
# except ImportError:
#     def create_and_run(prompt: str):
#         return f"ðŸ¤– Dummy agent response: {prompt}"

# # --- Initialize MCP Server ---
# server_config = config.get("server", {})
# mcp = FastMCP(name=server_config.get("name", "Smart Farming MCP Server"))

# # --- TOOLS ---

# if config.get("tools", {}).get("weather_tool", {}).get("enabled", True):
#     @mcp.tool()
#     def get_weather(location: str) -> dict:
#         """Fetch weather data for a given location."""
#         try:
#             return get_weather_data(location)
#         except Exception as e:
#             logger.error(f"Weather tool failed: {e}")
#             return {"error": str(e)}

# if config.get("tools", {}).get("disease_predictor", {}).get("enabled", True):
#     @mcp.tool()
#     def predict_disease(image_path: str) -> dict:
#         """Predict plant disease from an image."""
#         try:
#             return analyze_plant_image(image_path)
#         except Exception as e:
#             logger.error(f"Disease prediction failed: {e}")
#             return {"error": str(e)}

# if config.get("tools", {}).get("agent_creator", {}).get("enabled", True):
#     @mcp.tool()
#     def run_agent(prompt: str) -> str:
#         """Run an agent with the given prompt."""
#         try:
#             return create_and_run(prompt)
#         except Exception as e:
#             logger.error(f"Agent tool failed: {e}")
#             return {"error": str(e)}

# if config.get("tools", {}).get("disease_predictor", {}).get("enabled", True):
#     @mcp.tool()
#     def analyze_leaf_image(image_path: str) -> dict:
#         """
#         Analyze a plant leaf image for diseases and recommendations.
#         """
#         try:
#             result = analyze_plant_image(image_path)
#             # Ensure model always returns both disease + recommendation
#             disease = result.get("disease", "Unknown")
#             recommendations = result.get("recommendations", "No recommendations generated by model.")
#             return {"disease": disease, "recommendations": recommendations}
#         except Exception as e:
#             logger.error(f"Leaf analysis failed: {e}")
#             return {"error": str(e)}

# # --- HEALTH CHECK ---
# if config.get("health_check", {}).get("enabled", True):
#     @mcp.custom_route(config.get("health_check", {}).get("endpoint", "/health"), methods=["GET"])
#     def health(request):
#         return {"status": "ok", "message": "Server is running."}

# # --- ENTRY POINT ---
# if __name__ == "__main__":
#     print("ðŸŒ± Starting SMART_FARMING MCP Server...")
#     mcp.run(
#         transport=server_config.get("transport", "sse"),
#         host=server_config.get("host", "0.0.0.0"),
#         port=server_config.get("port", 8000)
#     )




from fastmcp import FastMCP
import logging
from pathlib import Path
import os
import sys
import json
import base64
import tempfile

# --- Load Configuration ---
config_path = Path(__file__).parent / "config.json"
if not config_path.exists():
    raise FileNotFoundError(f"Configuration file not found: {config_path}")

with open(config_path, "r") as config_file:
    config = json.load(config_file)

# --- Setup Logging ---
logging_level = config.get("logging", {}).get("level", "INFO").upper()
logging.basicConfig(level=getattr(logging, logging_level, logging.INFO))
logger = logging.getLogger("SmartFarmingMCP")

# --- Ensure Project Root is in Path ---
project_root = os.path.dirname(os.path.abspath(__file__))
if project_root not in sys.path:
    sys.path.insert(0, project_root)

# --- Imports (replace with real ones in your project) ---
try:
    from tools.weather_tool import get_weather_data
except ImportError:
    def get_weather_data(location: str):
        return {"location": location, "temp": "25Â°C", "status": "Sunny (dummy)"}

try:
    from models.disease_predictor import analyze_plant_image
except ImportError:
        def analyze_plant_image(image_path: str):
            # Dummy return for testing
            return {
                "disease": "Tomato___Late_blight",
                "recommendations": "Apply fungicides like Chlorothalonil or Copper-based sprays."
            }

try:
    from models.agent_creator import create_and_run
except ImportError:
    def create_and_run(prompt: str):
        return f"ðŸ¤– Dummy agent response: {prompt}"

# --- Initialize MCP Server ---
server_config = config.get("server", {})
mcp = FastMCP(name=server_config.get("name", "Smart Farming MCP Server"))

# --- TOOLS ---

if config.get("tools", {}).get("weather_tool", {}).get("enabled", True):
    @mcp.tool()
    def get_weather(location: str) -> dict:
        """Fetch weather data for a given location."""
        try:
            return get_weather_data(location)
        except Exception as e:
            logger.error(f"Weather tool failed: {e}")
            return {"error": str(e)}

if config.get("tools", {}).get("disease_predictor", {}).get("enabled", True):
    @mcp.tool()
    def predict_disease(image_base64: str) -> dict:
        """Predict plant disease from an uploaded image (base64 encoded)."""
        try:
            # Decode base64 image and save to temporary file
            image_data = base64.b64decode(image_base64)
            
            # Create temporary file
            with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as temp_file:
                temp_file.write(image_data)
                temp_path = temp_file.name
            
            try:
                # Analyze the image
                result = analyze_plant_image(temp_path)
                return result
            finally:
                # Clean up temporary file
                os.unlink(temp_path)
                
        except Exception as e:
            logger.error(f"Disease prediction failed: {e}")
            return {"error": str(e)}

if config.get("tools", {}).get("agent_creator", {}).get("enabled", True):
    @mcp.tool()
    def run_agent(prompt: str) -> str:
        """Run an agent with the given prompt."""
        try:
            return create_and_run(prompt)
        except Exception as e:
            logger.error(f"Agent tool failed: {e}")
            return {"error": str(e)}

if config.get("tools", {}).get("disease_predictor", {}).get("enabled", True):
    @mcp.tool()
    def analyze_leaf_image(image_path: str) -> dict:
        """
        Analyze a plant leaf image for diseases and recommendations.
        Provide either a file path or base64 encoded image data.
        """
        try:
            # Check if it's a base64 encoded image or a file path
            if image_path.startswith('data:image/') or len(image_path) > 500:
                # Likely base64 data
                if image_path.startswith('data:image/'):
                    # Remove data:image/jpeg;base64, prefix if present
                    image_base64 = image_path.split(',')[1]
                else:
                    image_base64 = image_path
                
                # Decode base64 image and save to temporary file
                image_data = base64.b64decode(image_base64)
                
                # Create temporary file
                with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as temp_file:
                    temp_file.write(image_data)
                    temp_path = temp_file.name
                
                try:
                    # Analyze the image
                    result = analyze_plant_image(temp_path)
                    # Ensure model always returns both disease + recommendation
                    disease = result.get("disease", "Unknown")
                    recommendations = result.get("recommendations", "No recommendations generated by model.")
                    return {"disease": disease, "recommendations": recommendations}
                finally:
                    # Clean up temporary file
                    os.unlink(temp_path)
            else:
                # Treat as file path (backward compatibility)
                if not os.path.exists(image_path):
                    return {"error": "Image file not found"}
                result = analyze_plant_image(image_path)
                # Ensure model always returns both disease + recommendation
                disease = result.get("disease", "Unknown")
                recommendations = result.get("recommendations", "No recommendations generated by model.")
                return {"disease": disease, "recommendations": recommendations}
                
        except Exception as e:
            logger.error(f"Leaf analysis failed: {e}")
            return {"error": str(e)}

# --- HEALTH CHECK ---
if config.get("health_check", {}).get("enabled", True):
    @mcp.custom_route(config.get("health_check", {}).get("endpoint", "/health"), methods=["GET"])
    def health(request):
        return {"status": "ok", "message": "Server is running."}

# --- ENTRY POINT ---
if __name__ == "__main__":
    print("ðŸŒ± Starting SMART_FARMING MCP Server...")
    mcp.run(
        transport=server_config.get("transport", "sse"),
        host=server_config.get("host", "0.0.0.0"),
        port=server_config.get("port", 8000)
    )